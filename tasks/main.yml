---
- name: Include platform variables
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"
  tags:
    - openssh

- name: Install openssh package
  loop:
    - openssh-server
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  tags:
    - openssh

- name: Create required dirs
  loop: '{{ openssh_general_dirs + openssh_extra_dirs }}'
  loop_control:
    label: '{{ item.path }}'
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ 'root' if item.owner is undefined else item.owner }}"
    group: "{{ 'root' if item.group is undefined else item.group }}"
    mode: "{{ 'u=rwx,g=rwx,o=' if item.mode is undefined else item.mode }}"
    state: "{{ 'directory' if item.state is undefined or item.state == 'present' else item.state }}"
  tags:
    - openssh

- name: Write server keys
  notify:
    - Reload openssh
  loop: '{{ openssh_host_keys }}'
  loop_control:
    label: '{{ item.name }}'
  diff: false
  when:
    - true if item.state is undefined else item.state == 'present'
    - false if item.key is undefined else (item.key | length > 0)
  ansible.builtin.copy:
    content: "{{ item.key | trim }}\n"
    dest: "/etc/ssh/{{ item.name }}"
    mode: u=rw,g=,o=
  tags:
    - openssh

- name: Remove server keys
  notify:
    - Reload openssh
  loop: '{{ openssh_host_keys }}'
  loop_control:
    label: '{{ item.name }}'
  diff: false
  when:
    - false if item.state is undefined else item.state == 'absent'
  ansible.builtin.file:
    path: "/etc/ssh/{{ item.name }}"
    state: absent
  tags:
    - openssh

- name: Write server pubs
  notify:
    - Reload openssh
  loop: '{{ openssh_host_keys }}'
  loop_control:
    label: '{{ item.name }}'
  diff: false
  when:
    - true if item.state is undefined else item.state == 'present'
    - false if item.pub is undefined else (item.pub | length > 0)
  ansible.builtin.copy:
    content: "{{ item.pub | trim }}\n"
    dest: "/etc/ssh/{{ item.name }}.pub"
    mode: u=rw,g=r,o=r
  tags:
    - openssh

- name: Remove server pubs
  notify:
    - Reload openssh
  loop: '{{ openssh_host_keys }}'
  loop_control:
    label: '{{ item.name }}'
  diff: false
  when:
    - false if item.state is undefined else item.state == 'absent'
  ansible.builtin.file:
    path: "/etc/ssh/{{ item.name }}.pub"
    state: absent
  tags:
    - openssh

- name: Check small primes
  register: openssh_register_moduli
  changed_when: false
  check_mode: false
  ansible.builtin.shell: awk '$5 < {{ openssh_moduli_minimum }}' /etc/ssh/moduli
  tags:
    - openssh

- name: Remove small primes
  notify:
    - Reload openssh
  when:
    - openssh_register_moduli.stdout | length > 0
  changed_when: openssh_register_moduli.stdout | length > 0
  ansible.builtin.shell: awk '$5 >= {{ openssh_moduli_minimum }}' /etc/ssh/moduli > /etc/ssh/moduli.new; [ -r /etc/ssh/moduli.new -a -s /etc/ssh/moduli.new ] && mv /etc/ssh/moduli.new /etc/ssh/moduli || true
  tags:
    - openssh

- name: Write server config
  notify:
    - Reload openssh
  ansible.builtin.template:
    src: config.j2
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: u=rw,g=,o=
    validate: /usr/sbin/sshd -tf %s
  tags:
    - openssh

- name: Write client config
  ansible.builtin.template:
    src: client.j2
    dest: /etc/ssh/ssh_config
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - openssh

- name: Write revoked keys
  notify:
    - Reload openssh
  when:
    - openssh_revoked_keys_file | length > 0
  ansible.builtin.copy:
    content: "{{ openssh_revoked_keys | join('\n') }}"
    dest: "{{ openssh_revoked_keys_file }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - openssh

- name: Write trusted CAs
  notify:
    - Reload openssh
  when:
    - false if openssh_trusted_user_ca_keys_file is none else (openssh_trusted_user_ca_keys_file | length > 0)
  ansible.builtin.copy:
    content: "{{ openssh_trusted_user_ca_keys | join('\n') }}"
    dest: "{{ openssh_trusted_user_ca_keys_file }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - openssh

- name: Create principal dirs
  loop: "{{ openssh_authorized_principals }}"
  loop_control:
    label: "{{ item.path | dirname }}"
  when:
    - true if item.state is undefined else item.state == 'present'
  ansible.builtin.file:
    path: "{{ item.path | dirname }}"
    mode: "{{ item.dirmode | default('u=rwx,g=,o=') }}"
    owner: "{{ item.dirowner | default('root') }}"
    group: "{{ item.dirgroup | default('root') }}"
    state: directory
  tags:
    - openssh

- name: Write principle file
  loop: "{{ openssh_authorized_principals }}"
  loop_control:
    label: "{{ item.path }}"
  when:
    - true if item.state is undefined else item.state == 'present'
  ansible.builtin.copy:
    content: "{{ item.principals | join('\n') }}"
    dest: "{{ item.path }}"
    mode: "{{ item.mode | default('u=rw,g=,o=') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
  tags:
    - openssh

- name: Remove principle file
  loop: "{{ openssh_authorized_principals }}"
  loop_control:
    label: "{{ item.path }}"
  when:
    - false if item.state is undefined else item.state == 'absent'
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  tags:
    - openssh

- name: Disable dynamic motd
  community.general.pamd:
    name: sshd
    type: session
    control: optional
    module_path: pam_motd.so
    state: absent
  tags:
    - openssh

...
